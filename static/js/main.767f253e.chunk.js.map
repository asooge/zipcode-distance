{"version":3,"sources":["LocationData.js","Distance.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["LocationData","props","info","LocationText","EstimatedPopulation","Lat","Long","Distance","latRad1","location1","Math","PI","latRad2","location2","latDiff","longDiff","a","sin","cos","distanceInMiles","atan2","sqrt","className","toFixed","Header","App","inputOne","event","console","log","input1","target","value","setState","zip1","parseInt","toString","zipcodes","info1","inputTwo","input2","zip2","info2","state","this","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k/wxHAaeA,EAXM,SAACC,GAElB,OACI,6BACI,4BAAKA,EAAMC,KAAKC,cAChB,0CAAgBF,EAAMC,KAAKE,qBAAuB,WAClD,wCAAcH,EAAMC,KAAKG,IAAzB,eAA0CJ,EAAMC,KAAKI,QCalDC,EAnBE,SAACN,GACd,IACMO,EAAUP,EAAMQ,UAAUJ,IAAMK,KAAKC,GAAK,IAC1CC,EAAUX,EAAMY,UAAUR,IAAMK,KAAKC,GAAK,IAC1CG,GAAWb,EAAMY,UAAUR,IAAMJ,EAAMQ,UAAUJ,KAAOK,KAAKC,GAAK,IAClEI,GAAYd,EAAMY,UAAUP,KAAOL,EAAMQ,UAAUH,MAAQI,KAAKC,GAAK,IAErEK,EAAIN,KAAKO,IAAIH,EAAQ,GAAKJ,KAAKO,IAAIH,EAAQ,GAAKJ,KAAKQ,IAAIV,GAAWE,KAAKQ,IAAIN,GAAWF,KAAKO,IAAIF,EAAS,GAAKL,KAAKO,IAAIF,EAAS,GAEjII,EARS,MAOL,EAAIT,KAAKU,MAAMV,KAAKW,KAAKL,GAAIN,KAAKW,KAAK,EAAEL,KAGnD,OACI,yBAAKM,UAAU,oBACX,qDACA,2BAAIrB,EAAMQ,UAAUN,aAApB,OAAsCF,EAAMY,UAAUV,aAAtD,OAAwEgB,EAAgBI,QAAQ,GAAhG,YCRGC,EANA,kBACX,yBAAKF,UAAU,UACX,qDCiEOG,E,YA7Db,aAAe,IAAD,8BACZ,+CAWFC,SAAW,SAACC,GACVC,QAAQC,IAAI,kBACZ,IAAMC,EAASH,EAAMI,OAAOC,MAC5B,EAAKC,SAAS,CAAEH,WAChB,IAAMI,EAAOC,SAASL,GAAQM,WAC9B,EAAKH,SAAS,CAAEC,SAChBN,QAAQC,IAAIQ,EAASH,IACrB,EAAKD,SAAS,CAAEK,MAAOD,EAASH,MAnBpB,EAsBdK,SAAW,SAACZ,GACVC,QAAQC,IAAI,kBACZ,IAAMW,EAASb,EAAMI,OAAOC,MAC5B,EAAKC,SAAS,CAAEO,WAChB,IAAMC,EAAON,SAASK,GAAQJ,WAC9B,EAAKH,SAAS,CAAEQ,SAChBb,QAAQC,IAAIQ,EAASI,IACrB,EAAKR,SAAS,CAAES,MAAOL,EAASI,MA3BhC,EAAKE,MAAQ,CACXb,OAAQ,GACRU,OAAQ,GACRN,KAAM,KACNO,KAAM,KACNH,MAAO,KACPI,MAAO,MARG,E,iFAiCZd,QAAQC,IAAI,cACZD,QAAQC,IAAIQ,EAAS,S,+BAIrB,OACE,yBAAKf,UAAU,OACb,kBAAC,EAAD,MACA,qDACA,2BAAOU,MAAOY,KAAKD,MAAMb,OAAQe,SAAUD,KAAKlB,YAC9CkB,KAAKD,MAAML,OAASM,KAAKD,MAAMb,QAAW,4DAC3Cc,KAAKD,MAAML,OAAU,kBAAC,EAAD,CAAcpC,KAAM0C,KAAKD,MAAML,QACrD,6BACA,qDACA,2BAAON,MAAOY,KAAKD,MAAMH,OAAQK,SAAUD,KAAKL,YAC9CK,KAAKD,MAAMD,OAASE,KAAKD,MAAMH,QAAW,4DAC3CI,KAAKD,MAAMD,OAAU,kBAAC,EAAD,CAAcxC,KAAM0C,KAAKD,MAAMD,QACpDE,KAAKD,MAAML,OAASM,KAAKD,MAAMD,OAC9B,kBAAC,EAAD,CACEjC,UAAWmC,KAAKD,MAAML,MACtBzB,UAAW+B,KAAKD,MAAMD,a,GAtDhBI,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.767f253e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst LocationData = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <h2>{props.info.LocationText}</h2>\r\n            <p>Population: {props.info.EstimatedPopulation || 'unknown'}</p>\r\n            <p>Latitude: {props.info.Lat}, Longitude:{props.info.Long}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationData","import React from 'react'\r\n\r\nconst Distance = (props) => {\r\n    const radius = 3959\r\n    const latRad1 = props.location1.Lat * Math.PI / 180\r\n    const latRad2 = props.location2.Lat * Math.PI / 180\r\n    const latDiff = (props.location2.Lat - props.location1.Lat) * Math.PI / 180\r\n    const longDiff = (props.location2.Long - props.location1.Long) * Math.PI / 180\r\n\r\n    const a = Math.sin(latDiff/2) * Math.sin(latDiff/2) + Math.cos(latRad1) * Math.cos(latRad2) * Math.sin(longDiff/2) * Math.sin(longDiff/2)\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\r\n    const distanceInMiles = radius * c\r\n\r\n    return (\r\n        <div className='display-distance'>\r\n            <h2>Calculated Distance: </h2>\r\n            <p>{props.location1.LocationText} to {props.location2.LocationText} is {distanceInMiles.toFixed(2)} Miles</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Distance","import React from 'react'\r\n\r\nconst Header = () => (\r\n    <div className='header'>\r\n        <h1>Zip Code Calculator</h1>\r\n    </div>\r\n)\r\n\r\nexport default Header","import React from 'react'\nimport './App.css'\nimport zipcodes from './zipcode-slim.json'\nimport LocationData from './LocationData'\nimport Distance from './Distance'\nimport Header from './Header'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      input1: '',\n      input2: '',\n      zip1: null,\n      zip2: null,\n      info1: null,\n      info2: null\n    }\n  }\n\n  inputOne = (event) => {\n    console.log('input1 working')\n    const input1 = event.target.value\n    this.setState({ input1 })\n    const zip1 = parseInt(input1).toString()\n    this.setState({ zip1 })\n    console.log(zipcodes[zip1])\n    this.setState({ info1: zipcodes[zip1] })\n  }\n\n  inputTwo = (event) => {\n    console.log('input1 working')\n    const input2 = event.target.value\n    this.setState({ input2 })\n    const zip2 = parseInt(input2).toString()\n    this.setState({ zip2 })\n    console.log(zipcodes[zip2])\n    this.setState({ info2: zipcodes[zip2] })\n  }\n\n  componentDidMount() {\n    console.log('app loaded')\n    console.log(zipcodes['6333'])\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <label>Enter zip code 1: </label>\n        <input value={this.state.input1} onChange={this.inputOne}/>\n        {!this.state.info1 && this.state.input1 && (<h4>please enter a valid zipcode</h4>)}\n        {this.state.info1 && (<LocationData info={this.state.info1}/>)}\n        <br />\n        <label>Enter zip code 2: </label>\n        <input value={this.state.input2} onChange={this.inputTwo}/>\n        {!this.state.info2 && this.state.input2 && (<h4>please enter a valid zipcode</h4>)}\n        {this.state.info2 && (<LocationData info={this.state.info2} />)}\n        {this.state.info1 && this.state.info2 && (\n          <Distance \n            location1={this.state.info1}\n            location2={this.state.info2}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}